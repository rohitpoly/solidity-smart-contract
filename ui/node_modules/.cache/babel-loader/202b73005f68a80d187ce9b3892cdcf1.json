{"ast":null,"code":"import _regeneratorRuntime from \"/home/rohitpolytrade/Documents/solidity/my-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rohitpolytrade/Documents/solidity/my-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/rohitpolytrade/Documents/solidity/my-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rohitpolytrade/Documents/solidity/my-ui/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Button, Form, InputGroup, FormControl } from 'react-bootstrap';\nimport './App.css'; // import TableRow from './views/tableRow';\n\nimport { contract, isMetaMaskInstalled, metamaskInit, onboarding } from './libs/contracts';\nvar accountID = '';\n\nfunction App() {\n  var _useState = useState('Connect'),\n      _useState2 = _slicedToArray(_useState, 2),\n      btnText = _useState2[0],\n      setBtnText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connBtnState = _useState4[0],\n      setConnBtnState = _useState4[1];\n\n  var _useState5 = useState('Not Connected'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      connStatus = _useState6[0],\n      setConnStatus = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      accBalance = _useState8[0],\n      setBalance = _useState8[1];\n\n  var hasMetaMask = false;\n\n  function getBalance(_x) {\n    return _getBalance.apply(this, arguments);\n  }\n\n  function _getBalance() {\n    _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n      var balance;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return contract.balanceOf(address);\n\n            case 2:\n              balance = _context3.sent;\n              setBalance(parseInt(balance, 16));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getBalance.apply(this, arguments);\n  }\n\n  var onClickConnect = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var accounts, _accounts;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Will open the MetaMask UI\n              // You should disable this button while the request is pending!\n              setConnBtnState(true);\n              _context.next = 4;\n              return metamaskInit();\n\n            case 4:\n              accounts = _context.sent;\n              setConnStatus(accounts[0] || 'Not able to get accounts');\n\n              if (accounts[0]) {\n                _accounts = _slicedToArray(accounts, 1);\n                accountID = _accounts[0];\n                getBalance(accountID);\n              }\n\n              setConnBtnState(false);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function onClickConnect() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  contract.on('Transfer', function (from, to, value) {\n    var amount = parseInt(value._hex, 16);\n    var cleantFrom = from.replace(/\\s/g, '');\n\n    if (cleantFrom === accountID) {\n      console.log('same acc');\n      setBalance(accBalance - amount);\n    } else {\n      console.log('not same acc');\n    }\n  });\n\n  var transferMoney = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var to, value;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              to = event.target.toAddress.value;\n              value = parseFloat(event.target.amountSent.value);\n              _context2.next = 5;\n              return contract.transfer(to, value);\n\n            case 5:\n              console.log('done'); // setTimeout(()=>getBalance(), 10000);\n              // console.log(accountID);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function transferMoney(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var initMeta = function initMeta() {\n    if (hasMetaMask) {\n      // connection\n      console.log('is connected');\n      onClickConnect();\n    } else {\n      setBtnText('Onboarding in progress');\n      setConnBtnState(true);\n      onboarding.startOnboarding();\n    }\n  };\n\n  var initialize = function initialize() {\n    var MetaMaskClientCheck = function MetaMaskClientCheck() {\n      if (!isMetaMaskInstalled()) {\n        hasMetaMask = false;\n        setBtnText('Click here to install MetaMask!');\n      } else {\n        hasMetaMask = true;\n        setBtnText('Connect');\n      }\n    };\n\n    MetaMaskClientCheck();\n  };\n\n  useEffect(function () {\n    console.log('using effects now');\n    initialize();\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, \"Tutorial Token\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"Connect to Metamask to begin\", ' ', /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), ' ', /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-success\",\n    size: \"sm\",\n    disabled: connBtnState,\n    onClick: initMeta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, btnText), ' '), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Account ID:\", ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, connStatus)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"My Balance:\", ' ', /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, accBalance, ' ', \"ETH\")), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"formSection\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: transferMoney,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    htmlFor: \"toAddress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"Send Token to Wallet Address\"), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    id: \"basic-addon2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, \"@\"), /*#__PURE__*/React.createElement(FormControl, {\n    placeholder: \"To Address\",\n    \"aria-label\": \"To Wallet Address\",\n    \"aria-describedby\": \"basic-addon2\",\n    id: \"toAddress\",\n    name: \"toAddress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  }, \"$\"), /*#__PURE__*/React.createElement(FormControl, {\n    \"aria-label\": \"Amount (to the nearest dollar)\",\n    placeholder: \"Amount\",\n    type: \"text\",\n    id: \"amount\",\n    name: \"amountSent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(InputGroup.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \".00\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"outline-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Send\"), ' ')), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: transferMoney,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rohitpolytrade/Documents/solidity/my-ui/src/App.js"],"names":["React","useEffect","useState","Button","Form","InputGroup","FormControl","contract","isMetaMaskInstalled","metamaskInit","onboarding","accountID","App","btnText","setBtnText","connBtnState","setConnBtnState","connStatus","setConnStatus","accBalance","setBalance","hasMetaMask","getBalance","address","balanceOf","balance","parseInt","onClickConnect","accounts","console","error","on","from","to","value","amount","_hex","cleantFrom","replace","log","transferMoney","event","preventDefault","target","toAddress","parseFloat","amountSent","transfer","initMeta","startOnboarding","initialize","MetaMaskClientCheck"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Button, Form, InputGroup, FormControl,\n} from 'react-bootstrap';\n\nimport './App.css';\n// import TableRow from './views/tableRow';\n\nimport {\n  contract, isMetaMaskInstalled, metamaskInit, onboarding,\n} from './libs/contracts';\n\nlet accountID = '';\n\nfunction App() {\n  const [btnText, setBtnText] = useState('Connect');\n  const [connBtnState, setConnBtnState] = useState(false);\n  const [connStatus, setConnStatus] = useState('Not Connected');\n  const [accBalance, setBalance] = useState(0);\n\n  let hasMetaMask = false;\n\n  async function getBalance(address) {\n    const balance = await contract.balanceOf(address);\n    setBalance(parseInt(balance, 16));\n  }\n\n  const onClickConnect = async () => {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      setConnBtnState(true);\n      const accounts = await metamaskInit();\n      setConnStatus(accounts[0] || 'Not able to get accounts');\n      if (accounts[0]) {\n        [accountID] = accounts;\n        getBalance(accountID);\n      }\n      setConnBtnState(false);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  contract.on('Transfer', (from, to, value) => {\n    const amount = parseInt(value._hex, 16);\n    const cleantFrom = from.replace(/\\s/g, '');\n\n    if (cleantFrom === accountID) {\n      console.log('same acc');\n      setBalance(accBalance - amount);\n    } else {\n      console.log('not same acc');\n    }\n  });\n\n  const transferMoney = async (event) => {\n    event.preventDefault();\n\n    const to = event.target.toAddress.value;\n    const value = parseFloat(event.target.amountSent.value);\n\n    await contract.transfer(to, value);\n\n    console.log('done');\n\n    // setTimeout(()=>getBalance(), 10000);\n\n    // console.log(accountID);\n  };\n\n  const initMeta = () => {\n    if (hasMetaMask) {\n      // connection\n      console.log('is connected');\n      onClickConnect();\n    } else {\n      setBtnText('Onboarding in progress');\n      setConnBtnState(true);\n      onboarding.startOnboarding();\n    }\n  };\n\n  const initialize = () => {\n    const MetaMaskClientCheck = () => {\n      if (!isMetaMaskInstalled()) {\n        hasMetaMask = false;\n        setBtnText('Click here to install MetaMask!');\n      } else {\n        hasMetaMask = true;\n        setBtnText('Connect');\n      }\n    };\n    MetaMaskClientCheck();\n  };\n\n  useEffect(() => {\n    console.log('using effects now');\n    initialize();\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Tutorial Token</h3>\n\n        <p>\n          Connect to Metamask to begin\n          {' '}\n          <br />\n          {' '}\n          <Button variant=\"outline-success\" size=\"sm\" disabled={connBtnState} onClick={initMeta}>{btnText}</Button>\n          {' '}\n        </p>\n\n        <br />\n\n        <p>\n          Account ID:\n          {' '}\n          <code>{connStatus}</code>\n        </p>\n\n        <p>\n          My Balance:\n          {' '}\n          <code>\n            {accBalance}\n            {' '}\n            ETH\n          </code>\n        </p>\n        <section className=\"formSection\">\n          <Form onSubmit={transferMoney}>\n            <Form.Label htmlFor=\"toAddress\">Send Token to Wallet Address</Form.Label>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text id=\"basic-addon2\">@</InputGroup.Text>\n              <FormControl\n                placeholder=\"To Address\"\n                aria-label=\"To Wallet Address\"\n                aria-describedby=\"basic-addon2\"\n                id=\"toAddress\"\n                name=\"toAddress\"\n              />\n            </InputGroup>\n\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text>$</InputGroup.Text>\n              <FormControl aria-label=\"Amount (to the nearest dollar)\" placeholder=\"Amount\" type=\"text\" id=\"amount\" name=\"amountSent\" />\n              <InputGroup.Text>.00</InputGroup.Text>\n            </InputGroup>\n\n            <Button type=\"submit\" variant=\"outline-primary\">Send</Button>\n            {' '}\n          </Form>\n        </section>\n        <section>\n          <Form onSubmit={transferMoney} />\n        </section>\n        <br />\n        <br />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}