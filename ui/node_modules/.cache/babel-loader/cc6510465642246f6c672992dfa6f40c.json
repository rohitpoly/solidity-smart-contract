{"ast":null,"code":"import _regeneratorRuntime from \"/home/rohitpolytrade/Documents/solidity/my-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rohitpolytrade/Documents/solidity/my-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ethers } from 'ethers';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nvar _window = window,\n    ethereum = _window.ethereum;\nvar contractAddress = '0xCa35291eBA2246E4c06d8b583a4f8CAB44B4Cc74';\nvar abi = [{\n  inputs: [{\n    internalType: 'string',\n    name: '_name',\n    type: 'string'\n  }],\n  stateMutability: 'nonpayable',\n  type: 'constructor'\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    indexed: true,\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    indexed: false,\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }],\n  name: 'Transfer',\n  type: 'event'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'user',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'uint256',\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'burn',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'getName',\n  outputs: [{\n    internalType: 'string',\n    name: '',\n    type: 'string'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'reciever',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'mint',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'reciever',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'amount',\n    type: 'uint256'\n  }],\n  name: 'transfer',\n  outputs: [],\n  stateMutability: 'nonpayable',\n  type: 'function'\n}];\nvar provider = new ethers.providers.Web3Provider(ethereum);\nvar signer = provider.getSigner(); // const gas = 21000;\n// const transactionParams = {\n//   from: accountID,\n//   to,\n//   value: value.toString(16),\n//   gasPrice: '0x09184e72a000',\n//   gas: gas.toString(16),\n// };\n// ethereum\n//   .request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParams]\n//   })\n//   .then((txHash) => {\n//     txnHistory.push({to, amount: value, hash: txHash});\n//     console.log(txHash);\n//     setTxn(txnHistory);\n//   })\n//   .catch((error) => console.error);\n\nexport var isMetaMaskInstalled = function isMetaMaskInstalled() {\n  return Boolean(ethereum && ethereum.isMetaMask);\n};\nexport var contract = new ethers.Contract(contractAddress, abi, signer);\nexport var metamaskInit = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var accounts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 2:\n            _context.next = 4;\n            return ethereum.request({\n              method: 'eth_accounts'\n            });\n\n          case 4:\n            accounts = _context.sent;\n            return _context.abrupt(\"return\", accounts);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function metamaskInit() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var onboarding = new MetaMaskOnboarding({\n  forwarderOrigin: 'http://localhost:9010'\n});","map":{"version":3,"sources":["/home/rohitpolytrade/Documents/solidity/my-ui/src/libs/contracts.js"],"names":["ethers","MetaMaskOnboarding","window","ethereum","contractAddress","abi","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","provider","providers","Web3Provider","signer","getSigner","isMetaMaskInstalled","Boolean","isMetaMask","contract","Contract","metamaskInit","request","method","accounts","onboarding","forwarderOrigin"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport MetaMaskOnboarding from '@metamask/onboarding';\n\nconst { ethereum } = window;\n\nconst contractAddress = '0xCa35291eBA2246E4c06d8b583a4f8CAB44B4Cc74';\n\nconst abi = [{ inputs: [{ internalType: 'string', name: '_name', type: 'string' }], stateMutability: 'nonpayable', type: 'constructor' }, {\n  anonymous: false,\n  inputs: [{\n    indexed: true, internalType: 'address', name: 'from', type: 'address',\n  }, {\n    indexed: true, internalType: 'address', name: 'to', type: 'address',\n  }, {\n    indexed: false, internalType: 'uint256', name: 'value', type: 'uint256',\n  }],\n  name: 'Transfer',\n  type: 'event',\n}, {\n  inputs: [{ internalType: 'address', name: 'user', type: 'address' }], name: 'balanceOf', outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }], stateMutability: 'view', type: 'function',\n}, {\n  inputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }], name: 'burn', outputs: [], stateMutability: 'nonpayable', type: 'function',\n}, {\n  inputs: [], name: 'getName', outputs: [{ internalType: 'string', name: '', type: 'string' }], stateMutability: 'view', type: 'function',\n}, {\n  inputs: [{ internalType: 'address', name: 'reciever', type: 'address' }, { internalType: 'uint256', name: 'amount', type: 'uint256' }], name: 'mint', outputs: [], stateMutability: 'nonpayable', type: 'function',\n}, {\n  inputs: [{ internalType: 'address', name: 'reciever', type: 'address' }, { internalType: 'uint256', name: 'amount', type: 'uint256' }], name: 'transfer', outputs: [], stateMutability: 'nonpayable', type: 'function',\n}];\n\nconst provider = new ethers.providers.Web3Provider(ethereum);\n\nconst signer = provider.getSigner();\n\n// const gas = 21000;\n\n// const transactionParams = {\n//   from: accountID,\n//   to,\n//   value: value.toString(16),\n//   gasPrice: '0x09184e72a000',\n//   gas: gas.toString(16),\n// };\n\n// ethereum\n//   .request({\n//     method: 'eth_sendTransaction',\n//     params: [transactionParams]\n//   })\n//   .then((txHash) => {\n\n//     txnHistory.push({to, amount: value, hash: txHash});\n//     console.log(txHash);\n//     setTxn(txnHistory);\n\n//   })\n//   .catch((error) => console.error);\n\nexport const isMetaMaskInstalled = () => Boolean(ethereum && ethereum.isMetaMask);\n\nexport const contract = new ethers.Contract(contractAddress, abi, signer);\n\nexport const metamaskInit = async () => {\n  await ethereum.request({ method: 'eth_requestAccounts' });\n  const accounts = await ethereum.request({ method: 'eth_accounts' });\n  return accounts;\n};\n\nexport const onboarding = new MetaMaskOnboarding({ forwarderOrigin: 'http://localhost:9010' });\n"]},"metadata":{},"sourceType":"module"}